# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GaussInt_XT')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GaussInt_XT')
    _GaussInt_XT = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GaussInt_XT', [dirname(__file__)])
        except ImportError:
            import _GaussInt_XT
            return _GaussInt_XT
        try:
            _mod = imp.load_module('_GaussInt_XT', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GaussInt_XT = swig_import_helper()
    del swig_import_helper
else:
    import _GaussInt_XT
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GaussInt_XT.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _GaussInt_XT.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GaussInt_XT.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GaussInt_XT.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GaussInt_XT.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GaussInt_XT.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GaussInt_XT.SwigPyIterator_copy(self)

    def next(self):
        return _GaussInt_XT.SwigPyIterator_next(self)

    def __next__(self):
        return _GaussInt_XT.SwigPyIterator___next__(self)

    def previous(self):
        return _GaussInt_XT.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GaussInt_XT.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GaussInt_XT.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GaussInt_XT.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GaussInt_XT.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GaussInt_XT.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GaussInt_XT.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GaussInt_XT.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GaussInt_XT.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class LineInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GaussInt_XT.LineInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GaussInt_XT.LineInt___nonzero__(self)

    def __bool__(self):
        return _GaussInt_XT.LineInt___bool__(self)

    def __len__(self):
        return _GaussInt_XT.LineInt___len__(self)

    def __getslice__(self, i, j):
        return _GaussInt_XT.LineInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GaussInt_XT.LineInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GaussInt_XT.LineInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GaussInt_XT.LineInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GaussInt_XT.LineInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GaussInt_XT.LineInt___setitem__(self, *args)

    def pop(self):
        return _GaussInt_XT.LineInt_pop(self)

    def append(self, x):
        return _GaussInt_XT.LineInt_append(self, x)

    def empty(self):
        return _GaussInt_XT.LineInt_empty(self)

    def size(self):
        return _GaussInt_XT.LineInt_size(self)

    def swap(self, v):
        return _GaussInt_XT.LineInt_swap(self, v)

    def begin(self):
        return _GaussInt_XT.LineInt_begin(self)

    def end(self):
        return _GaussInt_XT.LineInt_end(self)

    def rbegin(self):
        return _GaussInt_XT.LineInt_rbegin(self)

    def rend(self):
        return _GaussInt_XT.LineInt_rend(self)

    def clear(self):
        return _GaussInt_XT.LineInt_clear(self)

    def get_allocator(self):
        return _GaussInt_XT.LineInt_get_allocator(self)

    def pop_back(self):
        return _GaussInt_XT.LineInt_pop_back(self)

    def erase(self, *args):
        return _GaussInt_XT.LineInt_erase(self, *args)

    def __init__(self, *args):
        this = _GaussInt_XT.new_LineInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GaussInt_XT.LineInt_push_back(self, x)

    def front(self):
        return _GaussInt_XT.LineInt_front(self)

    def back(self):
        return _GaussInt_XT.LineInt_back(self)

    def assign(self, n, x):
        return _GaussInt_XT.LineInt_assign(self, n, x)

    def resize(self, *args):
        return _GaussInt_XT.LineInt_resize(self, *args)

    def insert(self, *args):
        return _GaussInt_XT.LineInt_insert(self, *args)

    def reserve(self, n):
        return _GaussInt_XT.LineInt_reserve(self, n)

    def capacity(self):
        return _GaussInt_XT.LineInt_capacity(self)
    __swig_destroy__ = _GaussInt_XT.delete_LineInt
    __del__ = lambda self: None
LineInt_swigregister = _GaussInt_XT.LineInt_swigregister
LineInt_swigregister(LineInt)

class LineDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GaussInt_XT.LineDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GaussInt_XT.LineDouble___nonzero__(self)

    def __bool__(self):
        return _GaussInt_XT.LineDouble___bool__(self)

    def __len__(self):
        return _GaussInt_XT.LineDouble___len__(self)

    def __getslice__(self, i, j):
        return _GaussInt_XT.LineDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GaussInt_XT.LineDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GaussInt_XT.LineDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GaussInt_XT.LineDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GaussInt_XT.LineDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GaussInt_XT.LineDouble___setitem__(self, *args)

    def pop(self):
        return _GaussInt_XT.LineDouble_pop(self)

    def append(self, x):
        return _GaussInt_XT.LineDouble_append(self, x)

    def empty(self):
        return _GaussInt_XT.LineDouble_empty(self)

    def size(self):
        return _GaussInt_XT.LineDouble_size(self)

    def swap(self, v):
        return _GaussInt_XT.LineDouble_swap(self, v)

    def begin(self):
        return _GaussInt_XT.LineDouble_begin(self)

    def end(self):
        return _GaussInt_XT.LineDouble_end(self)

    def rbegin(self):
        return _GaussInt_XT.LineDouble_rbegin(self)

    def rend(self):
        return _GaussInt_XT.LineDouble_rend(self)

    def clear(self):
        return _GaussInt_XT.LineDouble_clear(self)

    def get_allocator(self):
        return _GaussInt_XT.LineDouble_get_allocator(self)

    def pop_back(self):
        return _GaussInt_XT.LineDouble_pop_back(self)

    def erase(self, *args):
        return _GaussInt_XT.LineDouble_erase(self, *args)

    def __init__(self, *args):
        this = _GaussInt_XT.new_LineDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GaussInt_XT.LineDouble_push_back(self, x)

    def front(self):
        return _GaussInt_XT.LineDouble_front(self)

    def back(self):
        return _GaussInt_XT.LineDouble_back(self)

    def assign(self, n, x):
        return _GaussInt_XT.LineDouble_assign(self, n, x)

    def resize(self, *args):
        return _GaussInt_XT.LineDouble_resize(self, *args)

    def insert(self, *args):
        return _GaussInt_XT.LineDouble_insert(self, *args)

    def reserve(self, n):
        return _GaussInt_XT.LineDouble_reserve(self, n)

    def capacity(self):
        return _GaussInt_XT.LineDouble_capacity(self)
    __swig_destroy__ = _GaussInt_XT.delete_LineDouble
    __del__ = lambda self: None
LineDouble_swigregister = _GaussInt_XT.LineDouble_swigregister
LineDouble_swigregister(LineDouble)

class ArrayInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GaussInt_XT.ArrayInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GaussInt_XT.ArrayInt___nonzero__(self)

    def __bool__(self):
        return _GaussInt_XT.ArrayInt___bool__(self)

    def __len__(self):
        return _GaussInt_XT.ArrayInt___len__(self)

    def __getslice__(self, i, j):
        return _GaussInt_XT.ArrayInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GaussInt_XT.ArrayInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GaussInt_XT.ArrayInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GaussInt_XT.ArrayInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GaussInt_XT.ArrayInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GaussInt_XT.ArrayInt___setitem__(self, *args)

    def pop(self):
        return _GaussInt_XT.ArrayInt_pop(self)

    def append(self, x):
        return _GaussInt_XT.ArrayInt_append(self, x)

    def empty(self):
        return _GaussInt_XT.ArrayInt_empty(self)

    def size(self):
        return _GaussInt_XT.ArrayInt_size(self)

    def swap(self, v):
        return _GaussInt_XT.ArrayInt_swap(self, v)

    def begin(self):
        return _GaussInt_XT.ArrayInt_begin(self)

    def end(self):
        return _GaussInt_XT.ArrayInt_end(self)

    def rbegin(self):
        return _GaussInt_XT.ArrayInt_rbegin(self)

    def rend(self):
        return _GaussInt_XT.ArrayInt_rend(self)

    def clear(self):
        return _GaussInt_XT.ArrayInt_clear(self)

    def get_allocator(self):
        return _GaussInt_XT.ArrayInt_get_allocator(self)

    def pop_back(self):
        return _GaussInt_XT.ArrayInt_pop_back(self)

    def erase(self, *args):
        return _GaussInt_XT.ArrayInt_erase(self, *args)

    def __init__(self, *args):
        this = _GaussInt_XT.new_ArrayInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GaussInt_XT.ArrayInt_push_back(self, x)

    def front(self):
        return _GaussInt_XT.ArrayInt_front(self)

    def back(self):
        return _GaussInt_XT.ArrayInt_back(self)

    def assign(self, n, x):
        return _GaussInt_XT.ArrayInt_assign(self, n, x)

    def resize(self, *args):
        return _GaussInt_XT.ArrayInt_resize(self, *args)

    def insert(self, *args):
        return _GaussInt_XT.ArrayInt_insert(self, *args)

    def reserve(self, n):
        return _GaussInt_XT.ArrayInt_reserve(self, n)

    def capacity(self):
        return _GaussInt_XT.ArrayInt_capacity(self)
    __swig_destroy__ = _GaussInt_XT.delete_ArrayInt
    __del__ = lambda self: None
ArrayInt_swigregister = _GaussInt_XT.ArrayInt_swigregister
ArrayInt_swigregister(ArrayInt)

class ArrayDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GaussInt_XT.ArrayDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GaussInt_XT.ArrayDouble___nonzero__(self)

    def __bool__(self):
        return _GaussInt_XT.ArrayDouble___bool__(self)

    def __len__(self):
        return _GaussInt_XT.ArrayDouble___len__(self)

    def __getslice__(self, i, j):
        return _GaussInt_XT.ArrayDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GaussInt_XT.ArrayDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GaussInt_XT.ArrayDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GaussInt_XT.ArrayDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GaussInt_XT.ArrayDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GaussInt_XT.ArrayDouble___setitem__(self, *args)

    def pop(self):
        return _GaussInt_XT.ArrayDouble_pop(self)

    def append(self, x):
        return _GaussInt_XT.ArrayDouble_append(self, x)

    def empty(self):
        return _GaussInt_XT.ArrayDouble_empty(self)

    def size(self):
        return _GaussInt_XT.ArrayDouble_size(self)

    def swap(self, v):
        return _GaussInt_XT.ArrayDouble_swap(self, v)

    def begin(self):
        return _GaussInt_XT.ArrayDouble_begin(self)

    def end(self):
        return _GaussInt_XT.ArrayDouble_end(self)

    def rbegin(self):
        return _GaussInt_XT.ArrayDouble_rbegin(self)

    def rend(self):
        return _GaussInt_XT.ArrayDouble_rend(self)

    def clear(self):
        return _GaussInt_XT.ArrayDouble_clear(self)

    def get_allocator(self):
        return _GaussInt_XT.ArrayDouble_get_allocator(self)

    def pop_back(self):
        return _GaussInt_XT.ArrayDouble_pop_back(self)

    def erase(self, *args):
        return _GaussInt_XT.ArrayDouble_erase(self, *args)

    def __init__(self, *args):
        this = _GaussInt_XT.new_ArrayDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GaussInt_XT.ArrayDouble_push_back(self, x)

    def front(self):
        return _GaussInt_XT.ArrayDouble_front(self)

    def back(self):
        return _GaussInt_XT.ArrayDouble_back(self)

    def assign(self, n, x):
        return _GaussInt_XT.ArrayDouble_assign(self, n, x)

    def resize(self, *args):
        return _GaussInt_XT.ArrayDouble_resize(self, *args)

    def insert(self, *args):
        return _GaussInt_XT.ArrayDouble_insert(self, *args)

    def reserve(self, n):
        return _GaussInt_XT.ArrayDouble_reserve(self, n)

    def capacity(self):
        return _GaussInt_XT.ArrayDouble_capacity(self)
    __swig_destroy__ = _GaussInt_XT.delete_ArrayDouble
    __del__ = lambda self: None
ArrayDouble_swigregister = _GaussInt_XT.ArrayDouble_swigregister
ArrayDouble_swigregister(ArrayDouble)

Mesh_InterfaceXT_h = _GaussInt_XT.Mesh_InterfaceXT_h
class QuadParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nw"] = _GaussInt_XT.QuadParams_nw_set
    __swig_getmethods__["nw"] = _GaussInt_XT.QuadParams_nw_get
    if _newclass:
        nw = _swig_property(_GaussInt_XT.QuadParams_nw_get, _GaussInt_XT.QuadParams_nw_set)
    __swig_setmethods__["xw"] = _GaussInt_XT.QuadParams_xw_set
    __swig_getmethods__["xw"] = _GaussInt_XT.QuadParams_xw_get
    if _newclass:
        xw = _swig_property(_GaussInt_XT.QuadParams_xw_get, _GaussInt_XT.QuadParams_xw_set)
    __swig_setmethods__["w"] = _GaussInt_XT.QuadParams_w_set
    __swig_getmethods__["w"] = _GaussInt_XT.QuadParams_w_get
    if _newclass:
        w = _swig_property(_GaussInt_XT.QuadParams_w_get, _GaussInt_XT.QuadParams_w_set)

    def __init__(self):
        this = _GaussInt_XT.new_QuadParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GaussInt_XT.delete_QuadParams
    __del__ = lambda self: None
QuadParams_swigregister = _GaussInt_XT.QuadParams_swigregister
QuadParams_swigregister(QuadParams)

class ShapeFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeFunction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["psi"] = _GaussInt_XT.ShapeFunction_psi_set
    __swig_getmethods__["psi"] = _GaussInt_XT.ShapeFunction_psi_get
    if _newclass:
        psi = _swig_property(_GaussInt_XT.ShapeFunction_psi_get, _GaussInt_XT.ShapeFunction_psi_set)
    __swig_setmethods__["dpsi"] = _GaussInt_XT.ShapeFunction_dpsi_set
    __swig_getmethods__["dpsi"] = _GaussInt_XT.ShapeFunction_dpsi_get
    if _newclass:
        dpsi = _swig_property(_GaussInt_XT.ShapeFunction_dpsi_get, _GaussInt_XT.ShapeFunction_dpsi_set)

    def __init__(self):
        this = _GaussInt_XT.new_ShapeFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GaussInt_XT.delete_ShapeFunction
    __del__ = lambda self: None
ShapeFunction_swigregister = _GaussInt_XT.ShapeFunction_swigregister
ShapeFunction_swigregister(ShapeFunction)

class GaussianIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianIntegration, name)
    __repr__ = _swig_repr

    def Source_Integrate(self, NUMTHREADS, flag, B_tmp, a, nelsB, orderB, nodB, xnodB, maxordB):
        return _GaussInt_XT.GaussianIntegration_Source_Integrate(self, NUMTHREADS, flag, B_tmp, a, nelsB, orderB, nodB, xnodB, maxordB)

    def Error_Integrate2D(self, NUMTHREADS, A, B, nelsA, orderA, nodA, xnodA, maxordA, nelsB, orderB, nodB, xnodB, maxordB):
        return _GaussInt_XT.GaussianIntegration_Error_Integrate2D(self, NUMTHREADS, A, B, nelsA, orderA, nodA, xnodA, maxordA, nelsB, orderB, nodB, xnodB, maxordB)

    def __init__(self):
        this = _GaussInt_XT.new_GaussianIntegration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GaussInt_XT.delete_GaussianIntegration
    __del__ = lambda self: None
GaussianIntegration_swigregister = _GaussInt_XT.GaussianIntegration_swigregister
GaussianIntegration_swigregister(GaussianIntegration)

# This file is compatible with both classic and new-style classes.


